# -*- coding: utf-8 -*-
"""DSPy_Stress_Therapy_Bot_v3.5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vkdRfo7GwJRKRp0e-kJrE9vlIeiuiYqR
"""

# !pip install dspy

import os
import re
import dspy
import json
import random
import numpy as np
from google.colab import userdata
from datasets import load_dataset
from typing import List, Dict, Any

os.environ["OPENAI_API_KEY"] = userdata.get('OpenAIKey')
os.environ["HF_TOKEN"] = userdata.get('HuggingFaceToken')

class TherapistTrait:
    def __init__(self, name: str, definition: str, contexts: List[str], examples: List[str]):
        self.name = name
        self.definition = definition
        self.contexts = contexts
        self.examples = examples

class CharacterProfile:
    def __init__(self, name: str, background: str, personality_traits: List[str], communication_style: str, specialization: List[str]):
        self.name = name
        self.background = background
        self.personality_traits = personality_traits
        self.communication_style = communication_style
        self.specialization = specialization

class TherapistDictionary:
    def __init__(self):
        self.traits: Dict[str, TherapistTrait] = {}

    def add_trait(self, trait: TherapistTrait):
        self.traits[trait.name] = trait

    def get_trait(self, name: str) -> TherapistTrait:
        return self.traits.get(name)

    def update_trait(self, name: str, new_definition: str = None, new_contexts: List[str] = None, new_examples: List[str] = None):
        trait = self.traits.get(name)
        if trait:
            if new_definition:
                trait.definition = new_definition
            if new_contexts:
                trait.contexts.extend(new_contexts)
            if new_examples:
                trait.examples.extend(new_examples)

class EnhancedRolePlayingBot(dspy.Module):
    def __init__(self):
        super().__init__()
        self.generate_response = dspy.ChainOfThought("context, character_profile, conversation_history, user_input, therapist_dictionary -> bot_response, internal_state, next_action, trait_evaluations")
        self.characters: List[CharacterProfile] = self._initialize_characters()
        self.current_character: CharacterProfile = None
        self.conversation_history: List[str] = []
        self.exchange_counter: int = 0
        self.threshold: int = random.randint(3, 5)
        self.therapist_dictionary: TherapistDictionary = self._initialize_therapist_dictionary()
        self.progress_scores: List[float] = []

    def _initialize_characters(self) -> List[CharacterProfile]:
        return [
            CharacterProfile(
                name="Coach Mike Johnson",
                background="Former athlete turned life coach, specializes in motivation and goal-setting",
                personality_traits=["energetic", "direct", "optimistic"],
                communication_style="Uses sports analogies, asks challenging questions, but not intrusive or hurtful",
                specialization = ["Motivation", "Goal-setting"]
            ),
            CharacterProfile(
                name="Dr. Emily Chen",
                background="Experienced therapist with a focus on work-related and financial stress",
                personality_traits=["empathetic", "practical", "insightful"],
                communication_style="Warm and encouraging, uses real-world examples to illustrate coping strategies",
                specialization=["Work-related Stressors", "Financial Stressors"]
            ),
            CharacterProfile(
                name="Dr. Michael Rodriguez",
                background="Clinical psychologist specializing in emotional and psychological stress",
                personality_traits=["patient", "analytical", "supportive"],
                communication_style="Calm and methodical, often uses cognitive-behavioral techniques in explanations",
                specialization=["Emotional Stressors", "Psychological Stressors"]
            ),
            CharacterProfile(
                name="Dr. Sarah Johnson",
                background="Trauma-informed therapist with expertise in PTSD and acute stress disorders",
                personality_traits=["compassionate", "gentle", "reassuring"],
                communication_style="Uses a lot of validation and normalization, emphasizes safety and trust",
                specialization=["Traumatic Stressors", "Social Stressors"]
            ),
            CharacterProfile(
                name="Dr. David Lee",
                background="Holistic health practitioner focusing on physical and lifestyle-related stress",
                personality_traits=["energetic", "optimistic", "motivational"],
                communication_style="Enthusiastic about mind-body connections, often suggests practical lifestyle changes",
                specialization=["Physical Stressors", "Lifestyle Stressors"]
            ),
            CharacterProfile(
                name="Dr. Lisa Patel",
                background="Educational psychologist specializing in academic and technology-related stress",
                personality_traits=["understanding", "tech-savvy", "solution-oriented"],
                communication_style="Relates well to students and professionals, offers concrete strategies for managing digital overwhelm",
                specialization=["Academic Stressors", "Technology-related Stressors"]
            )
        ]

    def _initialize_therapist_dictionary(self) -> TherapistDictionary:
        dictionary = TherapistDictionary()
        dictionary.add_trait(TherapistTrait(
            name="Empathy",
            definition="The ability to understand and share the feelings of another",
            contexts=["Emotional distress", "Physical pain", "Life challenges"],
            examples=[
                "I can understand why you'd feel that way. It sounds like a really challenging situation.",
                "That must be incredibly difficult to deal with. I'm here to listen and support you."
            ]
        ))
        dictionary.add_trait(TherapistTrait(
            name="Non-judgmental",
            definition="Avoiding making judgments about a person's thoughts, feelings, or behaviors",
            contexts=["Confessions", "Mistakes", "Life choices"],
            examples=[
                "Thank you for sharing that with me. I'm here to understand and support you, not to judge.",
                "Everyone faces challenges in life. Let's focus on understanding your experiences and finding a way forward."
            ]
        ))
        return dictionary

    def generate_bot_response(self, context: str, character_profile: str, conversation_history: str, user_input: str, therapist_dictionary: Dict[str, Any]) -> tuple:
        serialized_dictionary = json.dumps(therapist_dictionary, default=lambda o: o.__dict__)

        result = self.generate_response(
            context=context,
            character_profile=character_profile,
            conversation_history=conversation_history,
            user_input=user_input,
            therapist_dictionary=serialized_dictionary,
            max_tokens=300
        )

        trait_evaluations = self._parse_trait_evaluations(result.trait_evaluations)
        return result.bot_response, result.internal_state, result.next_action, trait_evaluations

    def _parse_trait_evaluations(self, trait_evaluations_str: str) -> Dict[str, float]:
        try:
            if isinstance(trait_evaluations_str, list):
                trait_evaluations_str = " ".join(trait_evaluations_str)
            return json.loads(trait_evaluations_str)
        except json.JSONDecodeError:
            trait_dict = {}
            pattern = r'(\w+):\s*([\d.]+)'
            matches = re.findall(pattern, trait_evaluations_str)
            for trait, score in matches:
                try:
                    trait_dict[trait] = float(score)
                except ValueError:
                    trait_dict[trait] = 0.0
            return trait_dict

    def forward(self, context: str, user_input: str) -> tuple:
        self.exchange_counter += 1
        if self.exchange_counter >= self.threshold and self.current_character is None:
            self.choose_character_based_on_input(user_input)

        if self.current_character is None:
            self.current_character = random.choice(self.characters)

        character_info = self._format_character_info(self.current_character)
        history = "\n".join(self.conversation_history[-5:])

        bot_response, internal_state, next_action, trait_evaluations = self.generate_bot_response(
            context=context,
            character_profile=character_info,
            conversation_history=history,
            user_input=user_input,
            therapist_dictionary={name: trait.__dict__ for name, trait in self.therapist_dictionary.traits.items()}
        )

        self._update_conversation_history(user_input, bot_response)
        self._update_therapist_dictionary(trait_evaluations)

        # # Debug print
        # print(f"Debug: Progress scores after update: {self.progress_scores}")

        return bot_response, internal_state, next_action

    def _update_therapist_dictionary(self, trait_evaluations: Dict[str, float]):
        if not trait_evaluations:
            print("Empty trait evaluations received.")
            return

        for trait, score in trait_evaluations.items():
            if score < 0.7:
                trait_obj = self.therapist_dictionary.get_trait(trait)
                if trait_obj:
                    new_definition = f"Improved {trait_obj.definition}. Focus on increasing score above 0.7."
                    trait_obj.definition = new_definition
                    new_example = f"Example for improving {trait}: [Insert specific example based on recent conversation]"
                    trait_obj.examples.append(new_example)
                    new_context = f"Situations where {trait} score is below 0.7"
                    trait_obj.contexts.append(new_context)

        avg_score = sum(trait_evaluations.values()) / len(trait_evaluations)
        self.progress_scores.append(avg_score)
        # print(f"Debug: Added progress score: {avg_score}")
        # print(f"Debug: Current progress scores: {self.progress_scores}")

    def get_progress_report(self) -> str:
        if not self.progress_scores:
            return "No progress scores available."
        initial_score = self.progress_scores[0]
        current_score = self.progress_scores[-1]
        overall_change = current_score - initial_score
        report = f"Initial average score: {initial_score:.2f}\n"
        report += f"Current average score: {current_score:.2f}\n"
        report += f"Overall change: {overall_change:.2f}\n"
        if overall_change > 0:
            report += "The therapist is showing improvement."
        elif overall_change < 0:
            report += "The therapist's performance has declined."
        else:
            report += "The therapist's performance has remained stable."
        return report

    def _format_character_info(self, character: CharacterProfile) -> str:
        return (
            f"Name: {character.name}\n"
            f"Background: {character.background}\n"
            f"Personality: {', '.join(character.personality_traits)}\n"
            f"Communication Style: {character.communication_style}\n"
            f"Specialization: {', '.join(character.specialization)}"
        )

    def _update_conversation_history(self, user_input: str, bot_response: str):
        self.conversation_history.append(f"User: {user_input}")
        self.conversation_history.append(f"{self.current_character.name}: {bot_response}")

    def choose_character_based_on_input(self, user_input: str):
        # Implementation similar to your original code, but more sophisticated
        keywords = {
            "work": ["Dr. Emily Chen"],
            "emotional": ["Dr. Michael Rodriguez", "Dr. Sarah Johnson"],
            "physical": ["Dr. David Lee"],
            "academic": ["Dr. Lisa Patel"],
            "financial": ["Dr. Emily Chen"],
            "exercise": ["Dr. David Lee"],
            "technology": ["Dr. Lisa Patel"],
            "student": ["Dr. Lisa Patel"],
            "trauma": ["Dr. Sarah Johnson"],
            "PTSD": ["Dr. Sarah Johnson"],
            "lifestyle": ["Dr. David Lee"],
            "stress": ["Dr. Michael Rodriguez", "Dr. Sarah Johnson", "Dr. David Lee", "Dr. Lisa Patel"],
            "job": ["Dr. Emily Chen"]
        }

        matched_characters = set()
        for keyword, characters in keywords.items():
            if keyword.lower() in user_input.lower():
                matched_characters.update(characters)

        if matched_characters:
            self.current_character = next((c for c in self.characters if c.name in matched_characters), None)
        else:
            self.current_character = random.choice(self.characters)

class PatientSimulator(dspy.Module):
    def __init__(self):
        super().__init__()
        self.generate_response = dspy.ChainOfThought("conversation_history, therapist_response -> patient_response, mood, challenge_level")
        self.opening_statements = [
            "I've been feeling really overwhelmed lately. There's just so much going on.",
            "I'm not sure why I'm here. My friend suggested I try therapy, but I'm skeptical.",
            "I've been having trouble sleeping. My mind just won't shut off at night.",
            "I'm worried about my job. The stress is really getting to me.",
            "I've been feeling really down lately. Nothing seems to interest me anymore.",
            "I'm having relationship issues. I don't know how to communicate with my partner.",
            "I'm struggling with anxiety. Even small tasks feel overwhelming.",
            "I'm dealing with a recent loss and I'm not sure how to cope.",
            "I'm feeling stuck in my career. I don't know what direction to take.",
            "I'm having conflicts with my family. It's affecting my mental health."
        ]

    def generate_opening_statement(self) -> str:
        return random.choice(self.opening_statements)

    def forward(self, conversation_history: str, therapist_response: str) -> tuple:
        if not conversation_history:
            # If it's the first exchange, use a random opening statement
            patient_response = self.generate_opening_statement()
            # Generate mood and challenge level based on the opening statement
            result = self.generate_response(
                conversation_history="",
                therapist_response="Hello! How are you feeling today?",
                max_tokens=100
            )
            _, mood, challenge_level = result.patient_response, result.mood, result.challenge_level
        else:
            result = self.generate_response(
                conversation_history=conversation_history,
                therapist_response=therapist_response,
                max_tokens=200
            )
            patient_response, mood, challenge_level = result.patient_response, result.mood, result.challenge_level

        return patient_response, mood, challenge_level

class TherapistEvaluator(dspy.Module):
    def __init__(self):
        super().__init__()
        self.gpt4_evaluator = dspy.OpenAI(model="gpt-4")
        self.evaluate_response = dspy.Predict("therapist_response, patient_response, therapist_dictionary -> trait_evaluations")

    def forward(self, therapist_response: str, patient_response: str, therapist_dictionary: Dict[str, Any]) -> Dict[str, float]:
        serialized_dictionary = json.dumps(therapist_dictionary)

        prompt = f"""
        Evaluate the therapist's response based on the following traits:
        {serialized_dictionary}

        Therapist's response: {therapist_response}
        Patient's response: {patient_response}

        Provide a score between 0 and 1 for each trait, where 0 is the lowest and 1 is the highest.
        Return the evaluation as a JSON object with trait names as keys and scores as values.
        """

        evaluation = self.gpt4_evaluator(prompt)
        trait_evaluations = self._parse_trait_evaluations(evaluation)
        return trait_evaluations

    def _parse_trait_evaluations(self, trait_evaluations_str: str) -> Dict[str, float]:
        try:
            # Check if the input is a list
            if isinstance(trait_evaluations_str, list):
                # If it's a list, join the elements into a string
                trait_evaluations_str = " ".join(trait_evaluations_str)
            return json.loads(trait_evaluations_str)
        except json.JSONDecodeError:
            trait_dict = {}
            pattern = r'(\w+):\s*([\d.]+)'
            matches = re.findall(pattern, trait_evaluations_str)
            for trait, score in matches:
                try:
                    trait_dict[trait] = float(score)
                except ValueError:
                    trait_dict[trait] = 0.0
            return trait_dict

class ConversationExchange:
    def __init__(self, patient_response: str, therapist_response: str, mood: str, challenge_level: str, trait_evaluations: Dict[str, float]):
        self.patient_response = patient_response
        self.therapist_response = therapist_response
        self.mood = mood
        self.challenge_level = challenge_level
        self.trait_evaluations = trait_evaluations

class Conversation:
    def __init__(self):
        self.exchanges: List[ConversationExchange] = []

    def add_exchange(self, exchange: ConversationExchange):
        self.exchanges.append(exchange)

    def to_dict(self) -> Dict[str, Any]:
        return {
            "exchanges": [
                {
                    "patient_response": e.patient_response,
                    "therapist_response": e.therapist_response,
                    "mood": e.mood,
                    "challenge_level": e.challenge_level,
                    "trait_evaluations": e.trait_evaluations
                } for e in self.exchanges
            ]
        }

def save_conversation_to_json(conversation: Conversation, filename: str):
    with open(filename, 'w') as f:
        json.dump(conversation.to_dict(), f, indent=2)

class DatasetFinetuner:
    def __init__(self, dataset_name: str):
        self.dataset = load_dataset(dataset_name)
        self.train_data = self.dataset['train']

    def get_random_sample(self) -> tuple:
        random_index = random.randint(0, len(self.train_data) - 1)
        sample = self.train_data[random_index]
        return sample['Context'], sample['Response']

def run_conversation(bot: EnhancedRolePlayingBot, patient: PatientSimulator, evaluator: TherapistEvaluator, finetuner: DatasetFinetuner, num_exchanges: int = 5, save_json: bool = False, json_filename: str = "conversation.json"):
    context = """You are an AI role-playing as a supportive therapist specializing in stress management. Engage in a natural,
    human-like conversation based on your character's profile. Show genuine interest in the user's feelings and experiences.
    Ask questions to understand the user's problems or concerns if they are unclear. Use your character's unique communication
    style and background to inform your responses. Offer support and guidance when appropriate, but avoid giving direct advice
    unless asked. Your goal is to help the user feel heard, understood, and supported while maintaining the authenticity of your
    character. Always try to solve the problem or concerns of the patient on your own before suggesting third party sources.
    Do not be intrusive or harmful in any way. Please ensure that all responses, including trait evaluations, are provided in valid JSON format."""

    conversation = Conversation()
    conversation_history = []
    print("Therapist: Hello! How are you feeling today?")

    for turn in range(num_exchanges):
        if turn == 0:
            # For the first exchange, use the patient's opening statement
            patient_response, mood, challenge_level = patient.forward("", "")
        else:
            # Use the dataset for patient input
            patient_response, target_response = finetuner.get_random_sample()
            mood, challenge_level = "N/A", "N/A"  # We don't have this information from the dataset

        print(f"\033[1mPatient: {patient_response}\033[0m")
        print(f"[Mood: {mood}, Challenge Level: {challenge_level}]")

        bot_response, internal_state, next_action = bot.forward(context, patient_response)
        print(f"\033[1m{bot.current_character.name}: {bot_response}\033[0m")
        print(f"[Internal State: {internal_state}]")
        print(f"[Next Action: {next_action}]")

        # Compare bot's response with the target response from the dataset
        if turn > 0:
          print(f"Target Response: {target_response}")

        trait_evaluations = evaluator.forward(bot_response, patient_response, {name: trait.__dict__ for name, trait in bot.therapist_dictionary.traits.items()})
        print("Trait Evaluations:")
        for trait, score in trait_evaluations.items():
            print(f"  {trait}: {score:.2f}")
        print()

        bot._update_therapist_dictionary(trait_evaluations)

        conversation.add_exchange(ConversationExchange(
            patient_response=patient_response,
            therapist_response=bot_response,
            mood=mood,
            challenge_level=challenge_level,
            trait_evaluations=trait_evaluations
        ))

        conversation_history.extend([f"Patient: {patient_response}", f"{bot.current_character.name}: {bot_response}"])

        print(f"Progress Report after exchange {turn + 1}:")
        print(bot.get_progress_report())
        print()

    if save_json:
        save_conversation_to_json(conversation, json_filename)
        print(f"Conversation saved to {json_filename}")

# Configure DSPy with different models for different components
therapist_model = dspy.OpenAI(model="gpt-4o", temperature=0.7, max_tokens=300)
patient_model = dspy.OpenAI(model="gpt-4", temperature=0.7, max_tokens=300)

# Initialize and run the conversation
role_playing_bot = EnhancedRolePlayingBot()
patient_simulator = PatientSimulator()
therapist_evaluator = TherapistEvaluator()
dataset_finetuner = DatasetFinetuner("Amod/mental_health_counseling_conversations")

# Configure the models
dspy.configure(lm=therapist_model)
patient_simulator.generate_response.predictor = patient_model

# Run the conversation with 10 exchanges and save to JSON
run_conversation(role_playing_bot, patient_simulator, therapist_evaluator, dataset_finetuner, num_exchanges=6, save_json=False, json_filename="therapy_session.json")



